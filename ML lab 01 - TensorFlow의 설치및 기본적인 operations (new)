# TensorFlow
    - TensorFlow: 구글에서 만든 오픈소스 라이브러리
    - numerical computation(수치계산) using data flow graphs
    - python

# Data flow graphs란?
    (node: operations)와 node를 연결하는 (edge: data arrays 또는 tensors)
    원하는 결과를 얻거나 작업을 할 수 있는 것



#1. 설치
    pip install --upgrade tensorflow          
    pip install --upgrade tensorflow-gpu
-> pip: Python에서 작성된 패키지 소프트웨어를 설치(Python Package Index)

    import tensorflow as tf      # 제대로 설치되었는지 확인
    tf.__version__

소스코드: https://github.com/hunkim/DeepLearningZeroToAll/



#2. Hello TensorFlow!
    : hello라는 노드를 만들고 session을 만들어 실행시켰다.

    import tensorflow as tf
    
    hello = tf.constant("Hello, TensorFlow!")

    sess = tf.Session()             # session 만들기
    print(sess.run(hello))          # 위의 노드(Hello TensorFlow!)를 실행

결과: b'Hello TensorFlow!'          # b는 string이다.


   
#3. Computational Graph: 계산그래프
    # node 만들기 
    node1 = tf.constant(3.0, tf.float32)   # type: tf.float32
    node2 = tf.constant(4.0)
    node3 = tf.add(node1, node2)           # or node3 = node1+node2

    # 출력 
    print("node1", node1, "node2", node2)
    print("node3", node3)
    
    # 결과
    node1 : Tensor("Const_1:0", shape=(), dtype=float32) node2 :Tensor("Const_2:0", shape=(), dtype=float32)
    node3 : Tensor("Add:0", shape=(), dtype=float32)
                    # node를 print하면  type이 float32이고 shape가 값이 없는 real number(scalar)로 구성이 된 Tensor를 출력
                    # 우리가 사용할 모든 상수와 변수들은 이 Tensor라는 것으로 표현이 된다는 것을 알 수 있다.

                    # Tensor는 다양한 차원의 데이터를 표현하고 연산하기 위한 기본 데이터 객체가 된다. 
                    # 우리가 생성하는 모든 데이터는 이 Tensor로 생성이 되어 이후에 발생하는 모든 연산에서 수행이 되게 됩니다.

    # 결과값이 나오게 실행
    sess = tf.Session()
    print("sess.run(node1, node2): ", sess.run([node1, node2]))
    print("sess.run(node3): ", sess.run(node3))
    
    # 결과
    sess.run(node1, node2): [3.0, 4.0]
    sess.run(node3): 7.0
                    # 그리고 session에서 출력한 노드 값의 결과는 3과4, 7임을 알 수 있습니다.
                    # Tensorflow는 이러한 session 안에서만 실제적인 연산이나 로직을 수행하도록 되어 있습니다. 


# 그래프를 그려 실행
    1. Build graph(tensorflow operations): 그래프를 빌드
        node1
        node2
        node3
    2. sess.run: 그래프 실행
        sess.run()
    3.return: 그 값을 리턴
    


    #5. 그래프를 만들어 실행시키는데 중간에 값을 던져주고 싶다: Placeholder
    : node를 만드는데 placeholder라는 특별한 노드를 만들어줌
    a = tf.placeholder(tf.float32)
    b = tf.placeholder(tf.float32)
    adder_node = a + b

    print(sess.run(adder_node, feed_dict={a: 3, b: 4.5})
    print(sess.run(adder_node, feed_dict={a: [1,3], b=[2, 4]}))
    
    # 결과
    7.5
    [ 3. 7.]


#6. tensor ranks, shapes, and tyle
    - ranks(차원):[ 0:scalar, 1:vector, 2:matrix, 3:tensor, n:n tensor]
    
    - shapes(형태): 차원 수와 각 차원마다 길이
                    [], [D0], [D0,D1], [D0,D1,D2], [D0,D1,...,DN-1]
    0    []                    0-차원  스칼라인 0-차원 텐서.
    1    [D0]                  1-차원  형태가 [5]인 1-차원 텐서.
    2    [D0, D1]              2-차원  형태가 [3, 4]인 2-차원 텐서.
    3    [D0, D1, D2]          3-차원  형태가 [1, 4, 3]인 3-차원 텐서.
    n    [D0, D1, ... Dn-1]    n-차원  형태가 [D0, D1, ... Dn-1]인 텐서.
       ex. t=[[1,2,3], [4,5,6], [7,8,9]]: [3,3]
           
    - types: (DT_FLOAT: tf.float32), (DT_DOUBLE: tf.floa64),
             (DT_INT32: tf.int32),...
